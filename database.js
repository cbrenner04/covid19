const { Client } = require("pg");
require("dotenv").config();

let client;
const connectToDB = async () => {
  client = new Client({
    connectionString: process.env.DATABASE_URL,
  });
  await client.connect();
};
const disconnectFromDB = async () => await client.end();

const createStatesDataTableQuery = {
  text: `
    CREATE TABLE states (
      did           integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      name          char(2),
      date          timestamp,
      positive      integer,
      deaths        integer,
      tested        integer,
      totalpositive integer,
      totaldeaths   integer,
      totaltested   integer
    )
  `,
};

async function createStatesDataTable() {
  await client.query(createStatesDataTableQuery);
}

const createCountryDataTableQuery = {
  text: `
    CREATE TABLE countries (
      did            integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      name           varchar(40),
      date           timestamp,
      positive       integer,
      deaths         integer,
      tested         integer,
      totalpositive  integer,
      totalrecovered integer,
      totaldeaths    integer,
      totaltested    integer
    )
  `,
};

async function createCountriesDataTable() {
  await client.query(createCountryDataTableQuery);
}

const statesColumns =
  "name, date, positive, deaths, tested, totalpositive, totaldeaths, totaltested";

const insertIntoStatesQuery = (values) => ({
  name: "insert-into-states",
  text: `
    INSERT INTO states (${statesColumns})
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8);
  `,
  values,
});

async function insertIntoStates(values) {
  await client.query(insertIntoStatesQuery(values));
}

const countriesColumns =
  "name, date, positive, deaths, tested, totalpositive, totalrecovered, totaldeaths, totaltested";

const insertIntoCountriesQuery = (values) => ({
  name: "insert-into-countries",
  text: `
    INSERT INTO countries (${countriesColumns})
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9);
  `,
  values,
});

async function insertIntoCountries(values) {
  await client.query(insertIntoCountriesQuery(values));
}

const selectLatestStatesDataQuery = (name) => ({
  name: "select-latest-states-data",
  text: `
    SELECT
      ${statesColumns}
    FROM
      states
    WHERE
      name=$1
    ORDER BY
      date DESC
    LIMIT 1;
  `,
  values: [name],
});

async function selectLatestStatesData(name) {
  const data = await client.query(selectLatestStatesDataQuery(name));
  return data.rows[0];
}

const selectLatestCountriesDataQuery = (name) => ({
  name: "select-latest-countries-data",
  text: `
    SELECT
      ${countriesColumns}
    FROM
      countries
    WHERE
      name=$1
    ORDER BY
      date DESC
    LIMIT 1;
  `,
  values: [name],
});

async function selectLatestCountriesData(name) {
  const data = await client.query(selectLatestCountriesDataQuery(name));
  return data.rows[0];
}

const selectAllStatesDataQuery = {
  name: "select-all-states-data",
  text: `
    SELECT
      statesData.date,
      statesData.name,
      statesData.positive,
      statesData.deaths,
      statesData.tested,
      statesData.totalpositive,
      statesData.totaldeaths,
      statesData.totaltested,
      AVG(statesData.percentPositive)
        OVER(PARTITION BY name ORDER BY statesData.date ROWS BETWEEN 14 PRECEDING AND CURRENT ROW) as "avgPercentPositive",
      AVG(statesData.percentDeaths)
        OVER(PARTITION BY name ORDER BY statesData.date ROWS BETWEEN 14 PRECEDING AND CURRENT ROW) as "avgPercentDeaths"
    FROM (
      SELECT
        x.date,
        d.name,
        d.positive,
        d.deaths,
        d.tested,
        d.totalpositive,
        d.totaldeaths,
        d.totaltested,
        d.percentPositive,
        d.percentDeaths
      FROM (
        SELECT generate_series(min(date), CURRENT_DATE - 1, '1d')::DATE AS date
        FROM states
      ) x
      LEFT JOIN (
        SELECT
          name,
          DATE_TRUNC('day', date)::DATE AS date,
          positive,
          deaths,
          tested,
          totalpositive,
          totaldeaths,
          totaltested,
          CASE WHEN tested = 0 THEN 0
              ELSE (positive::FLOAT / tested::FLOAT)
          END AS percentPositive,
          CASE WHEN positive = 0 THEN 0
              ELSE (deaths::FLOAT / positive::FLOAT)
          END AS percentDeaths
        FROM
          states
        ORDER BY
          name, date ASC
      ) d USING (date)
      GROUP BY
        x.date,
        d.name,
        d.positive,
        d.deaths,
        d.tested,
        d.totalpositive,
        d.totaldeaths,
        d.totaltested,
        d.percentPositive,
        d.percentDeaths
      ORDER BY
        x.date ASC
    ) AS statesData;
  `,
};

async function selectAllStatesData() {
  const data = await client.query(selectAllStatesDataQuery);
  return data.rows;
}

("name, date, positive, deaths, tested, totalpositive, totalrecovered, totaldeaths, totaltested");

const selectAllCountriesDataQuery = {
  name: "select-all-countries-data",
  text: `
    SELECT
      countriesData.date,
      countriesData.name,
      countriesData.positive,
      countriesData.deaths,
      countriesData.tested,
      countriesData.totalpositive,
      countriesData.totalrecovered,
      countriesData.totaldeaths,
      countriesData.totaltested,
      AVG(countriesData.percentPositive)
        OVER(PARTITION BY name ORDER BY countriesData.date ROWS BETWEEN 14 PRECEDING AND CURRENT ROW) as "avgPercentPositive",
      AVG(countriesData.percentDeaths)
        OVER(PARTITION BY name ORDER BY countriesData.date ROWS BETWEEN 14 PRECEDING AND CURRENT ROW) as "avgPercentDeaths"
    FROM (
      SELECT
        x.date,
        d.name,
        d.positive,
        d.deaths,
        d.tested,
        d.totalpositive,
        d.totalrecovered,
        d.totaldeaths,
        d.totaltested,
        d.percentPositive,
        d.percentDeaths
      FROM (
        SELECT generate_series(min(date), CURRENT_DATE - 1, '1d')::DATE AS date
        FROM countries
      ) x
      LEFT JOIN (
        SELECT
          DATE_TRUNC('day', date)::DATE AS date,
          name,
          positive,
          deaths,
          tested,
          totalpositive,
          totalrecovered,
          totaldeaths,
          totaltested,
          CASE WHEN tested = 0 THEN 0
              ELSE (positive::FLOAT / tested::FLOAT)
          END AS percentPositive,
          CASE WHEN positive = 0 THEN 0
              ELSE (deaths::FLOAT / positive::FLOAT)
          END AS percentDeaths
        FROM
          countries
        ORDER BY
          name, date ASC
      ) d USING (date)
      GROUP BY
        x.date,
        d.name,
        d.positive,
        d.deaths,
        d.tested,
        d.totalpositive,
        d.totalrecovered,
        d.totaldeaths,
        d.totaltested,
        d.percentPositive,
        d.percentDeaths
      ORDER BY
        x.date ASC
    ) AS countriesData;
  `,
};

async function selectAllCountriesData() {
  const data = await client.query(selectAllCountriesDataQuery);
  return data.rows;
}

module.exports = {
  connectToDB,
  disconnectFromDB,
  createStatesDataTable,
  insertIntoStates,
  createCountriesDataTable,
  insertIntoCountries,
  selectLatestStatesData,
  selectLatestCountriesData,
  selectAllStatesData,
  selectAllCountriesData,
};
